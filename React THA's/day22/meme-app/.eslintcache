[{"D:\\Programming\\front-end\\React THA's\\day22\\meme-app\\src\\index.js":"1","D:\\Programming\\front-end\\React THA's\\day22\\meme-app\\src\\App.js":"2","D:\\Programming\\front-end\\React THA's\\day22\\meme-app\\src\\Components\\Template.jsx":"3","D:\\Programming\\front-end\\React THA's\\day22\\meme-app\\src\\Components\\SelectedTemplate.jsx":"4"},{"size":154,"mtime":1627230169814,"results":"5","hashOfConfig":"6"},{"size":1037,"mtime":1627374267073,"results":"7","hashOfConfig":"6"},{"size":344,"mtime":1627310653066,"results":"8","hashOfConfig":"6"},{"size":1697,"mtime":1627398960570,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"3h69uw",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\Programming\\front-end\\React THA's\\day22\\meme-app\\src\\index.js",[],["20","21"],"D:\\Programming\\front-end\\React THA's\\day22\\meme-app\\src\\App.js",[],"D:\\Programming\\front-end\\React THA's\\day22\\meme-app\\src\\Components\\Template.jsx",[],"D:\\Programming\\front-end\\React THA's\\day22\\meme-app\\src\\Components\\SelectedTemplate.jsx",["22"],"import React, { useState } from 'react'\r\n\r\nfunction SelectedTemplate(props) {\r\n\r\n  const [form, setForm] = useState({\r\n    template_id : props.meme.id,\r\n    username: \"CosmicBliss\",\r\n    password: \"somethingrandom321\",\r\n    boxes : []\r\n  })\r\n\r\n  // When the generate meme  button is clicked\r\n  const generateMeme = () => {\r\n    let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n    form.boxes.map((box, index) => {\r\n      url+=`&boxes[${index}][text]=${box.text}`\r\n      console.log(`&boxes[${index}][text]=${box.text}`)\r\n    })\r\n    console.log(url);\r\n    fetch(url).then(response => response.json())\r\n    .then(data=> {\r\n      if (data.success) {\r\n      props.setSelectedTemplate({...props.meme, url : data.data.url})\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"meme\">\r\n\r\n        <img src={props.meme.url} alt=\"\"/>\r\n        <div className=\"caption-boxes\">\r\n\r\n          {/* Creating the input boxes */}\r\n          {[...Array(props.meme.box_count)].map((_, index) => ( \r\n              <input \r\n              key={index}\r\n              type=\"text\" \r\n              placeholder={`Caption ${index+1}`}\r\n              onChange={(e)=>{\r\n                const newBoxes = form.boxes;\r\n                newBoxes[index] = {text: e.target.value}\r\n                setForm({...form, boxes: newBoxes})\r\n              }} \r\n              />\r\n          ))}\r\n\r\n        </div>\r\n\r\n        <button onClick={() => generateMeme()}>Generate meme</button>\r\n        <button  onClick={() => props.setSelectedTemplate(null)}>Choose Template</button>\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SelectedTemplate",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":15,"column":33,"nodeType":"29","messageId":"30","endLine":15,"endColumn":35},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]